
三、开发之导入导出

1、to-many表达式设置值：
	(0, _ , {‘field’: value})新建一条记录并将其与之关联
	(1, id, {‘field’: value})更新已关联记录的值
	(2, id, _)移除关联并删除 id 关联的记录
	(3, id, _)移除关联但不删除 id 关联的记录。通常使用它来删除many-to-many字段的关联记录
	(4, id, _)关联已存在记录，仅适用于many-to-many字段
	(5, _, _)删除所有关联，但不删除关联记录
	(6, _, [ids])替换已关联记录列表为此处的列表
	
	小贴士：
		1.上述下划线_字符代表非关联值，通常填入 o 或 False
		2.后面的非关联值可以放心地省略掉，如(4, id, _) 可使用(4, id)

2、xml加载数据对应模型
	<act_window>是窗口操作模型ir.actions.act_window
	<menuitem>是菜单项模型ir.ui.menu
	<report>是报表操作模型ir.actions.report.xml
	<template>是存储在ir.ui.view模型中的 QWeb 模板
	
	
	
四、结构化应用数据

1、模型属性
	_name 			是我们创建的 Odoo 模型的内部标识符，在创建新模型时为必填。
	_description	是对用户友好的模块记录标题，在用户界面中查看模型时显示。可选但推荐添加。
	_order			设置浏览模型记录时或列表视图的默认排序。其值为 SQL 语句中 order by 使用的字符串，所以可以传入符合 SQL 语法的任意值，它有智能模式并支持可翻译及many-to-one字段名。
	_rec_name		在从关联字段（如many-to-one关联）中引用时作为记录描述。默认使用模型中常用的 name字段，但可以指定任意其它字段。
	_table			是模型对应的数据表名。默认表名由 ORM 通过替换模块名中的点为下划线来自动定义，但是可通过该属性指定表名。
	_log_access=False用于设置不自动创建审计追踪字段：create_uid, create_date, write_uid和write_date。
	_auto=False 	用于设置不自动创建模型对应的数据表。如有需要，可通过重载init()方法来创建数据库对象：数据表或视图。
	
2、数据类型字段
	Char(string)		是一个单行文本，唯一位置参数是string字段标签。
	Text(string)		是一个多行文本，唯一位置参数是string字段标签。
	Selection(selection, string)是一个下拉选择列表。选项位置参数是一个[(‘value’, ‘Title’),]元组列表。元组第一个元素是存储在数据库中的值，第二个元素是展示在用户界面中的描述。该列表可由其它模块使用selection_add关键字参数扩展。
	Html(string)		存储为文本字段，但有针对用户界面 HTML 内容展示的特殊处理。出于安全考虑，该字段会被清洗，但清洗行为可被重载。
	Integer(string)		仅需字段标题字符串参数。
	Float(string, digits)带有第二个可选参数digits，该字段是一个指定字段精度的(x,y)元组，x 是数字总长，y 是小数位。
	Monetary(string, currency_field)与浮点字段类似，但带有货币的特殊处理。第二个参数currency_field用于存储所使用货币，默认应传入currency_id字段。
	Date(string)和Datetime(string)字段只需一个字符串文本位置参数。
	Boolean(string)		的值为True 或False，可传入一个字符串文本位置参数。
	Binary(string)		存储文件类二进制文件，只需一个字符串文本位置参数。它可由Python使用 base64编码字符串进行处理。
	
3、常用字段属性
	string		是字段的默认标签，在用户界面中使用。除Selection和关联字段外，它都是第一个位置参数，所以大多数情况下它用作关键字参数。如未传入，将由字段名自动生成。
	default		设置字段默认值。可以是具体值（如 active字段中的default=True），或是可调用引用，有名函数或匿名函数均可。
	help		提供 UI 中鼠标悬停字段向用户显示的提示文本。
	readonly=True会使用户界面中的字段默认不可编辑。在 API 层面并没有强制，模型方法中的代码仍然可以向其写入。仅针对用户界面设置。
	required=True使得用户界面中字段默认必填。这通过在数据库层面为列添加NOT NULL 约束来实现。
	index=True	为字段添加数据库索引，让搜索更快速，但同时也会部分降低写操作速度。
	copy=False	让字段在使用 ORM copy()方法复制字段时忽略该字段。除 to-many 关联字段外，其它字段值默认会被复制。
	groups		可限制字段仅对一些组可访问并可见。值为逗号分隔的安全组XML ID列表，如groups=’base.group_user,base.group_system’。
	states		传入依赖 state字段值的 UI 属性的字典映射值。可用属性有readonly, required和invisible，例如states={‘done’:[(‘readonly’,True)]}。
	deprecated=True在字段被使用时记录一条 warning 日志
	oldname=’field’是在新版本中重命名字段时使用，可在升级模块时将老字段中的数据自动拷贝到新字段中
	
4、特殊字段名
	create_uid	为创建记录的用户
	create_date	是记录创建的日期和时间
	write_uid	是最后写入记录的用户
	write_date	是最后修改记录的日期和时间
	name 		(通常为 Char)默认作为记录的显示名称。通过是一个 Char，但也可以是 Text 或Many2one字段类型。用作显示名的字段可修改为_rec_name模型属性。
	active 		(Boolean型)允许我们关闭记录。带有active=False的记录会自动从查询中排除掉。可在当前上下文中添加{‘active_test’: False} 来关闭这一自动过滤。可用作记录存档或假删除（soft delete）。
	state 		(Selection类型) 表示记录生命周期的基本状态。它允许使用states字段属性来根据记录状态以具备不同的 UI 行为。动态修改视图：字段可在特定记录状态下变为readonly, required或invisible。
	parent_id	和parent_path Integer和Char型)对于父子层级关系具有特殊意义。本文后续会进行讨论。
	
5、Many-to-one关联
	说明：
		第一个位置参数是关联模型(comodel关键字参数)。
		第二位置参数是字段标签(string关键字参数)
	ondelete定义关联记录删除时执行的操作：
		set null (默认值): 关联字段删除时会置为空值
		restricted：抛出错误阻止删除
		cascade：在关联记录删除时同时删除当前记录
	context是一个数据字典，可在浏览关联时为网页客户端传递信息，比如设置默认值。第八章 Odoo 12开发之业务逻辑 – 业务流程的支持中会做深入说明。
	domain是一个域表达式：使用一个元组列表过滤记录来作为关联记录选项，第八章 Odoo 12开发之业务逻辑 – 业务流程的支持中会详细说明。
	auto_join=True允许ORM在使用关联进行搜索时使用SQL连接。使用时会跳过访问安全规则，用户可以访问安全规则不允许其访问的关联记录，但这样 SQL 的查询会更有效率且更快。
	delegate=True 创建一个关联记录的代理继承。使用时必须设置required=True和ondelete=’cascade
	
6、One2many
	关联模型 (comodel_name关键字参数)
	引用该记录的模型字段 (inverse_name关键字参数)
	字段标签 (string关键字参数)
	说明：其它可用的关键字参数与many-to-one字段相同：context, domain和ondelete（此处作用于关联中的 many 这一方）。
	
7、base模型
	base模块中包含两类模型：
	1.信息仓库(Information Repository)， ir.*模型
		说明：信息仓库用于存储 Odoo 所需数据，以知道如何作为应用来运作，如菜单、视图、模型、Action 等等。Technical菜单下的数据通常都存储在信息仓库中。相关的例子有：
		ir.actions.act_window用于窗口操作
		ir.ui.menu用于菜单项
		ir.ui.view用于视图
		ir.model用于模型
		ir.model.fields用于模型字段
		ir.model.data用于XML ID
	
	2.资源(Resources)， res.*模型
		说明：资源包含基本数据，基本上用于应用。以下是一些重要的资源模型：
		res.partner用于业务伙伴，如客户、供应商和地址等等
		res.company用于公司数据
		res.currency用于货币
		res.country用于国家
		res.users用于应用用户
		res.groups用于应用安全组



第十章、设计用户界面

1、菜单项<menuitem>
	name		是展示在用户界面中的菜单项标题
	action		是点击菜单项时运行的窗口操作的XML ID
	parent		是父级菜单项的XML ID。本例中父级项由其它模块创建，因此们使用了完整的XML ID, <module>.<XML ID>进行引用。
	sequence	设置一个数字来在展示菜单项时进行排序，如sequence=”10″
	groups		是一个逗号分隔的可访问菜单项安全组的XML ID列表，如groups=”library_app.library_group_user, library_app.library_group_manager”
	web_icon	是菜单项的图标，仅用于企业版的顶级菜单项，如web_icon=”library_app,static/description/icon.png”
	
2、窗口操作(Window Actions)
	name		是通过操作打开的视图中显示的标题
	res_model	是目标模型的标识符
	view_mode	是一个逗号分隔的可用视图类型列表。第一项为默认打开时的视图。
	target：	如果设置为 new,会在弹出的对话框窗口中打开视图，例如target=”new”。默认值是current，在主内容区行内打开视图。
	context：	为目标视图设置上下文信息，可设置默认值或启用过滤器等，例如context=”{‘default_user_id’: uid}”。
	domain：	是对可在打开视图中浏览的记录强制过滤的域表达式，例如domain=”[(‘user_id’, ‘=’, uid)]”。
	limit：		列表视图中每页显示的记录数，例如limit=”80″。
	
	窗口操作还可在列表和表单视图的上方的 Action 菜单按钮中使用，它在 Fitlers 按钮旁。要使用这个，我们需要在元素中添加以下两个属性：
		src_model	设置Action所作用的模型，例如src_model=”library.checkout”
		multi=”true”也启用列表视图中的Action，这样它可以作用于多个已选记录。否则仅在表单视图中可用，并且一次只能应用于一条记录。

3、表单视图结构

	业务文件视图通常使用三大区域：
	1.header状态栏
		头部header 通常用于文档所走过的生命周期或步骤，还包含相关的操作按钮。这些按钮是普通表单按钮，最重要的下一步可以高亮显示。
		1.头部按钮
			1.例子：
                <header>
                    <field name="state" invisible="True" />
                    <button name="button_done"
                        string="Return Books"
                        attrs="{'invisible':
                            [('state', 'in', ['new', 'done'])]}"
                        class="oe_highlight" />
                </header>
			2.如果要生效，需要在python中写button_done方法
				def button_done(self):
					Stage = self.env['library.checkout.stage']
					done_stage = State.search(
						[('state', '=', 'done')],
						limit=1)
					for checkout in self:
						checkout.stage_id = done_stage
					return True
		2.阶段管道
			1.需要用到statusbar组件
				<header>
				...
					<field name="stage_id"
						widget="statusbar"
						clickable="True"
						options="{'fold_field': 'fold'}" />
				</header>
		3.使用状态代替阶段
			          <field name="state"
                        widget="statusbar"
                        clickable="True"
                        statusbar_visible="draft,open,done" />
		
	2.sheet主内容
	
	3.底部交流区，也称作chatter
		底部的交流区使用了 mail 插件模块中提供的社交网络组件

4、文档表单
	1.标题和副标题
		        <sheet>
                    <field name="member_image" widget="image" class="oe_avatar" />
                    <div class="oe_title">
                        <label for="member_id" class="oe_edit_only" />
                        <h1><field name="member_id" /></h1>
                        <h3>
                            <span class="oe_read_only">By </span>
                            <label for="user_id" class="oe_edit_only" />
                            <field name="user_id" class="oe_inline" />
                        </h3>
                    </div>
                    <!-- More elements will be added from here... -->
                </sheet>
				
	2.表单内容分组
		1.group套group来分成两列
		2.在 group 内，<newline>元素会强制在新的一行，下一个元素会渲染到组的第一列
		3.col和colsapn 属性可用于<group>元素中来自定义包含的列数
		
	3.选项卡笔记本(Tabbed notebooks)
		1.另一种组织内容的方式是 notebook 元素，一个包含多个称为页面(page)的选项卡分区的容器
			添加一个页面
		            <notebook>
                        <page string="Borrowed Books" name="page_lines">
                            <field name="line_ids" />
                        </page>
                    </notebook>
			page支持一下属性
				string：选项卡的标题（必填）
				attrs：不可见属性与表达式映射的字典
				accesskey：HTML访问密钥
		2.添加多个页面，我们需在<section>元素内添加更多的<page>版块
	
5、字段
	视图字段有一些可用属性。大部分从模型定义中获取值，但可在视图中覆盖。以下来快速查看字段的可用属性：
	name		标识字段数据库中名称
	string		用于想要覆盖模型中标签文本的标签文本
	help		是鼠标悬停在字段上显示的提示文本，它允许我们覆盖模型定义中提供的帮助文本
	placeholder	是在字段中显示的提示文本
	widget		让我们可以覆盖字段的默认组件，一会儿我们就会讲到可用的组件
	options		是一个带有组件附加数据的JSON数据结构，值随各组件的不同支持而不同
	class		是用于字段 HTML 渲染的CSS类
	nolabel=”True”		阻止自动字段标签的展示。仅对<group>元素内的字段有作用，通常与<label for=”…”>元素一起使用。
	invisible=”True”	让字段不可见，但仍会从服务端获取数据并可在表单中使用
	readonly=”True”		让表单中该字段不可编辑
	required=”True”		让表单中该字段为必填
	
	一些特定字段的属性如下：
	password=”True”		用于文本字段。显示为密码项，隐藏所输入文字
	filename			用于二进制字段，它是用于存储上传文件名的模型字段的名称
	
	1.字段标签
		<label>元素可用于更好地控制字段标签的展示。一个使用示例是仅在表单为编辑模式时展示标签
	
	2.字段组件
		每个字段类型都会使用相应的默认组件在表单中显示。但还有一些替代组件可以使用。对于文本字段，有如下组件：
		email	用于让 email 文本成为可操作的”mail-to”地址
		url		用于将文本格式化为可点击的URL
		html	用于将文本渲染为HTML内容；在编辑模式下，它显示为一个WYSIWYG(所见即所得)编辑器，可在不使用 HTML 代码的情况下格式化内容。
		
		对于数字字段，有以下组件：
		handle		在列表视图中作为一个排序字段，显示一个句柄来让我们可以拖放进行自定义排序
		float_time	将一个浮点型字段格式化为带有小时和分钟的值
		monetary	将一个浮点型字段显示为货币金额。它与currency_id字段一起使用，还可以通过options=”{‘currency_field’: ‘currency_id’}”来使用另一个字段名
		progressbar	将一个浮点值显示为进度条百分比，有助于将字段展示为完成率
		percentage和percentpie组件可用于浮点型字段
		
		对于关联和选择项字段，有以下附加组件：
		many2many_tags		将值显示为按钮标签列表
		many2many_checkboxes将选项值显示为一个复选框列表
		selection对many-to-one字段使用选择字段组件
		radio			以单选按钮显示选择字段选项
		priority		将选项字段显示为一个可点击星形列表。选择项目通常是数值。
		state_selection	将看板状态选择列表显示为信号灯。普通状态显示为灰色，完成显示为绿色，其它状态显示为红色。
	
6、按钮
	string	是按钮文本标签或使用图标时的 HTML alt 文本
	type	是执行操作的类型，有以下值：
		object	用于调用 Python 方法
		action	用于运行窗口操作
	name	标识按所选类型要操作的具体的操作，要么是模型方法名，要么是要运行的窗口操作的数据库 ID。可使用%(xmlid)d方程式来将XML ID转换成加载视图时所需的数据库 ID。
	args	在类型为 object 时用于向方法传递额外的参数，须是在形成方法调用参数的记录 ID 之后所添加的纯静态 JSON 参数。
	context	在上下文中添加值，可在窗口操作或 Python 代码方法调用之后产生效果。
	confirm	在运行相关操作之前显示确认消息框，显示的内容是属性中分配的文本。special=”cancel”用于向导表单。
	icon	是按钮所显示的图标。可用的按钮来自Font Awesome图标集，版本为4.7.0，应通过对应的 CSS 类来指定，如icon=”fa-question”。

	1.智能按钮
	
7、动态视图元素
	1.onchange 事件
	2.动态属性
		groups	可根据当前用户所属安全组来让元素可见。仅指定组的成员可看到该元素。它的值应为一个逗号分隔的XML ID列表
		states	可根据记录的状态字段来让元素可见。它的值为一个逗号分隔的状态列表，仅对带有state 字段的模型生效。	
		attrs	设置invisible，attrs属性也可为其它两个属性设置值：readonly和required
	
8、列表视图
	记住表达式中使用的字段必须要在<field>字段中声明，这样网页客户端才知道要从服务端获取该列。如果不想对用户显示，应对其使用invisible=”1″属性。
	default_order	让我们可以覆盖模型中的默认排序，它的值和模型中定义的排序格式相同。
	create, delete和edit，	如果设为 false（字母小写），会禁用列表视图中的相应操作。
	editable		让记录在列表视图中可直接被编辑。可用值有 top 和 bottom，表示新记录添加的位置。
	
9、搜索视图
	
	字段元素可使用如下属性：
		name标识要使用的字段
		string用作标签文本，它会替换默认值
		operator用于修改默认的运算符(默认值：数值字段=，其它字段类型ilike)
		filter_domain设置搜索使用的特定域表达式，为 operator 属性提供一种灵活的替代方式。搜索文本在表达式中通过 self 引用。一个简单示例：filter_domain=”[(‘name’, ‘ilike’, self)]”
		groups让对该字段的搜索仅向安全组内成员开发，它的值是一个逗号分隔的XML ID列表
		
	过滤元素有以下可用属性：
		name用作后续继承/扩展或通过窗口操作启用的标识符。这不是必填项，但包含该属性是一个不错的编码习惯。
		string是过滤器显示的标签文本，必填
		domain是加入当前域的域表达式
		context是加入当前上下文的上下文字典。通常使用group_id作为键，用于对记录分组的字段名作为值
		groups让该字段的搜索仅对安全组列表(XML IDs)成员开放
	
10、其它视图类型
	activity	将计划活动显示为有组织的汇总
	calendar	基于所选日期字段以日历格式展示数据
	diagram		展示记录间的关系，当前不在 Odoo 中使用
	
	以下两种视图类型用于显示累加数据：
	graph		用于图表展示
	pivot		用于交互的数据透视表
	
	还有更多的视图类型，但仅在 Odoo 企业版中可用。因为我们整个系列的文章是基于社区版的，所以无法为这些视图提供示例：
	dashboard	使用透视表和图表这类子视图展示累加数据
	cohort		用于显示在不同时期数据如何变化
	gantt		以甘特图显示日期计划信息，常用于项目管理
	grid		通过行和列网格组织数据进行展示
	
11、看板视图
	*********

第十一章、QWeb 模板语言
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	